package zjut.salu.share.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import zjut.salu.share.model.lightstrategy.banggume.Banggume;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BANGGUME".
*/
public class BanggumeDao extends AbstractDao<Banggume, String> {

    public static final String TABLENAME = "BANGGUME";

    /**
     * Properties of entity Banggume.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Bangumeid = new Property(0, String.class, "bangumeid", true, "BANGUMEID");
        public final static Property Bangumename = new Property(1, String.class, "bangumename", false, "BANGUMENAME");
        public final static Property Bangumecontent = new Property(2, String.class, "bangumecontent", false, "BANGUMECONTENT");
        public final static Property Bangumeurl = new Property(3, String.class, "bangumeurl", false, "BANGUMEURL");
        public final static Property Clicknum = new Property(4, int.class, "clicknum", false, "CLICKNUM");
        public final static Property Bangumetags = new Property(5, String.class, "bangumetags", false, "BANGUMETAGS");
        public final static Property Bangumecover = new Property(6, String.class, "bangumecover", false, "BANGUMECOVER");
        public final static Property Isesence = new Property(7, int.class, "isesence", false, "ISESENCE");
        public final static Property Bangumedate = new Property(8, java.util.Date.class, "bangumedate", false, "BANGUMEDATE");
        public final static Property Banggumesharenum = new Property(9, int.class, "banggumesharenum", false, "BANGGUMESHARENUM");
        public final static Property Banggumedownloadnum = new Property(10, int.class, "banggumedownloadnum", false, "BANGGUMEDOWNLOADNUM");
        public final static Property Banggumecollectnum = new Property(11, int.class, "banggumecollectnum", false, "BANGGUMECOLLECTNUM");
        public final static Property Phonestoragepath = new Property(12, String.class, "phonestoragepath", false, "PHONESTORAGEPATH");
        public final static Property Size = new Property(13, int.class, "size", false, "SIZE");
    }


    public BanggumeDao(DaoConfig config) {
        super(config);
    }
    
    public BanggumeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BANGGUME\" (" + //
                "\"BANGUMEID\" TEXT PRIMARY KEY NOT NULL ," + // 0: bangumeid
                "\"BANGUMENAME\" TEXT," + // 1: bangumename
                "\"BANGUMECONTENT\" TEXT," + // 2: bangumecontent
                "\"BANGUMEURL\" TEXT," + // 3: bangumeurl
                "\"CLICKNUM\" INTEGER NOT NULL ," + // 4: clicknum
                "\"BANGUMETAGS\" TEXT," + // 5: bangumetags
                "\"BANGUMECOVER\" TEXT," + // 6: bangumecover
                "\"ISESENCE\" INTEGER NOT NULL ," + // 7: isesence
                "\"BANGUMEDATE\" INTEGER," + // 8: bangumedate
                "\"BANGGUMESHARENUM\" INTEGER NOT NULL ," + // 9: banggumesharenum
                "\"BANGGUMEDOWNLOADNUM\" INTEGER NOT NULL ," + // 10: banggumedownloadnum
                "\"BANGGUMECOLLECTNUM\" INTEGER NOT NULL ," + // 11: banggumecollectnum
                "\"PHONESTORAGEPATH\" TEXT," + // 12: phonestoragepath
                "\"SIZE\" INTEGER NOT NULL );"); // 13: size
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BANGGUME\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Banggume entity) {
        stmt.clearBindings();
 
        String bangumeid = entity.getBangumeid();
        if (bangumeid != null) {
            stmt.bindString(1, bangumeid);
        }
 
        String bangumename = entity.getBangumename();
        if (bangumename != null) {
            stmt.bindString(2, bangumename);
        }
 
        String bangumecontent = entity.getBangumecontent();
        if (bangumecontent != null) {
            stmt.bindString(3, bangumecontent);
        }
 
        String bangumeurl = entity.getBangumeurl();
        if (bangumeurl != null) {
            stmt.bindString(4, bangumeurl);
        }
        stmt.bindLong(5, entity.getClicknum());
 
        String bangumetags = entity.getBangumetags();
        if (bangumetags != null) {
            stmt.bindString(6, bangumetags);
        }
 
        String bangumecover = entity.getBangumecover();
        if (bangumecover != null) {
            stmt.bindString(7, bangumecover);
        }
        stmt.bindLong(8, entity.getIsesence());
 
        java.util.Date bangumedate = entity.getBangumedate();
        if (bangumedate != null) {
            stmt.bindLong(9, bangumedate.getTime());
        }
        stmt.bindLong(10, entity.getBanggumesharenum());
        stmt.bindLong(11, entity.getBanggumedownloadnum());
        stmt.bindLong(12, entity.getBanggumecollectnum());
 
        String phonestoragepath = entity.getPhonestoragepath();
        if (phonestoragepath != null) {
            stmt.bindString(13, phonestoragepath);
        }
        stmt.bindLong(14, entity.getSize());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Banggume entity) {
        stmt.clearBindings();
 
        String bangumeid = entity.getBangumeid();
        if (bangumeid != null) {
            stmt.bindString(1, bangumeid);
        }
 
        String bangumename = entity.getBangumename();
        if (bangumename != null) {
            stmt.bindString(2, bangumename);
        }
 
        String bangumecontent = entity.getBangumecontent();
        if (bangumecontent != null) {
            stmt.bindString(3, bangumecontent);
        }
 
        String bangumeurl = entity.getBangumeurl();
        if (bangumeurl != null) {
            stmt.bindString(4, bangumeurl);
        }
        stmt.bindLong(5, entity.getClicknum());
 
        String bangumetags = entity.getBangumetags();
        if (bangumetags != null) {
            stmt.bindString(6, bangumetags);
        }
 
        String bangumecover = entity.getBangumecover();
        if (bangumecover != null) {
            stmt.bindString(7, bangumecover);
        }
        stmt.bindLong(8, entity.getIsesence());
 
        java.util.Date bangumedate = entity.getBangumedate();
        if (bangumedate != null) {
            stmt.bindLong(9, bangumedate.getTime());
        }
        stmt.bindLong(10, entity.getBanggumesharenum());
        stmt.bindLong(11, entity.getBanggumedownloadnum());
        stmt.bindLong(12, entity.getBanggumecollectnum());
 
        String phonestoragepath = entity.getPhonestoragepath();
        if (phonestoragepath != null) {
            stmt.bindString(13, phonestoragepath);
        }
        stmt.bindLong(14, entity.getSize());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Banggume readEntity(Cursor cursor, int offset) {
        Banggume entity = new Banggume();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Banggume entity, int offset) {
        entity.setBangumeid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBangumename(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBangumecontent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBangumeurl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setClicknum(cursor.getInt(offset + 4));
        entity.setBangumetags(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBangumecover(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsesence(cursor.getInt(offset + 7));
        entity.setBangumedate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setBanggumesharenum(cursor.getInt(offset + 9));
        entity.setBanggumedownloadnum(cursor.getInt(offset + 10));
        entity.setBanggumecollectnum(cursor.getInt(offset + 11));
        entity.setPhonestoragepath(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSize(cursor.getInt(offset + 13));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Banggume entity, long rowId) {
        return entity.getBangumeid();
    }
    
    @Override
    public String getKey(Banggume entity) {
        if(entity != null) {
            return entity.getBangumeid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Banggume entity) {
        return entity.getBangumeid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
