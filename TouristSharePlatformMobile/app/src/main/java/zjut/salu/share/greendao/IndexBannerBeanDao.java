package zjut.salu.share.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import zjut.salu.share.model.IndexBannerBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INDEX_BANNER_BEAN".
*/
public class IndexBannerBeanDao extends AbstractDao<IndexBannerBean, String> {

    public static final String TABLENAME = "INDEX_BANNER_BEAN";

    /**
     * Properties of entity IndexBannerBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property CoverImage = new Property(1, String.class, "coverImage", false, "COVER_IMAGE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property P1 = new Property(3, String.class, "p1", false, "P1");
        public final static Property P2 = new Property(4, String.class, "p2", false, "P2");
        public final static Property P3 = new Property(5, String.class, "p3", false, "P3");
        public final static Property P4 = new Property(6, String.class, "p4", false, "P4");
        public final static Property Type = new Property(7, String.class, "type", false, "TYPE");
    }


    public IndexBannerBeanDao(DaoConfig config) {
        super(config);
    }
    
    public IndexBannerBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INDEX_BANNER_BEAN\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"COVER_IMAGE\" TEXT," + // 1: coverImage
                "\"NAME\" TEXT," + // 2: name
                "\"P1\" TEXT," + // 3: p1
                "\"P2\" TEXT," + // 4: p2
                "\"P3\" TEXT," + // 5: p3
                "\"P4\" TEXT," + // 6: p4
                "\"TYPE\" TEXT);"); // 7: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INDEX_BANNER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IndexBannerBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String coverImage = entity.getCoverImage();
        if (coverImage != null) {
            stmt.bindString(2, coverImage);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String p1 = entity.getP1();
        if (p1 != null) {
            stmt.bindString(4, p1);
        }
 
        String p2 = entity.getP2();
        if (p2 != null) {
            stmt.bindString(5, p2);
        }
 
        String p3 = entity.getP3();
        if (p3 != null) {
            stmt.bindString(6, p3);
        }
 
        String p4 = entity.getP4();
        if (p4 != null) {
            stmt.bindString(7, p4);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(8, type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IndexBannerBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String coverImage = entity.getCoverImage();
        if (coverImage != null) {
            stmt.bindString(2, coverImage);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String p1 = entity.getP1();
        if (p1 != null) {
            stmt.bindString(4, p1);
        }
 
        String p2 = entity.getP2();
        if (p2 != null) {
            stmt.bindString(5, p2);
        }
 
        String p3 = entity.getP3();
        if (p3 != null) {
            stmt.bindString(6, p3);
        }
 
        String p4 = entity.getP4();
        if (p4 != null) {
            stmt.bindString(7, p4);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(8, type);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public IndexBannerBean readEntity(Cursor cursor, int offset) {
        IndexBannerBean entity = new IndexBannerBean();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IndexBannerBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCoverImage(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setP1(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setP2(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setP3(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setP4(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(IndexBannerBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(IndexBannerBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IndexBannerBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
